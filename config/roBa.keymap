#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        poteto: poteto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp I &kp M &kp O &kp M &kp A &kp Z &kp I &kp P &kp O &kp T &kp E &kp T &kp O &kp N3 &kp AT &kp N8>;
            label = "POTETO";
        };

        RDP: RDP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp HOME>;

            label = "RDP";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E           &kp R        &kp T                                                &kp Y          &kp U        &kp I            &kp O            &kp P
&mt LCTRL A       &mt LEFT_ALT S  &mt LEFT_WIN D  &mt LCTRL F  &kp G        &kp LC(LS(X))         &poteto           &kp H          &mt RCTRL J  &mt RIGHT_WIN K  &mt RIGHT_ALT L  &kp ENTER
&mt LEFT_SHIFT Z  &kp X           &kp C           &kp V        &kp B        &kp F10               &none             &kp N          &lt 5 M      &mkp LCLK        &mkp RCLK        &mt RIGHT_SHIFT MINUS
&kp ESC           &kp LEFT_ALT    &kp LEFT_WIN    &lt 3 TAB    &lt 2 SPACE  &lt 1 LANGUAGE_2      &lt 4 LANGUAGE_1  &kp BACKSPACE                                                 &kp DEL
            >;
        };

        NUM {
            bindings = <
&none           &kp F7        &kp F8        &kp F9  &kp F12                               &kp MINUS     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK
&kp LCTRL       &kp F4        &kp F5        &kp F6  &kp F11    &kp PLUS       &kp PERIOD  &kp COLON     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ENTER
&kp LEFT_SHIFT  &kp F1        &kp F2        &kp F3  &kp SPACE  &kp EQUAL      &kp COMMA   &kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp F11
&kp ESC         &kp LEFT_ALT  &kp LEFT_WIN  &none   &none      &none          &kp F10     &kp NUMBER_0                                            &kp DEL
            >;
        };

        ARROW {
            bindings = <
&none                 &kp LC(LS(TAB))  &kp LS(LEFT_WIN)  &kp LC(TAB)  &kp LC(LS(T))                      &kp RS(HOME)        &kp HOME          &kp UP_ARROW    &kp END          &kp RS(END)
&kp LC(A)             &kp LEFT_ALT     &kp LEFT_WIN      &kp LCTRL    &kp TAB        &none       &none   &kp RC(LEFT_ARROW)  &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RC(RIGHT_ARROW)
&mt LEFT_SHIFT LC(Z)  &kp LC(X)        &kp LC(C)         &kp LC(V)    &kp LG(LS(S))  &none       &none   &kp LESS_THAN       &kp GREATER_THAN  &kp COMMA       &kp PERIOD       &kp RIGHT_SHIFT
&trans                &trans           &trans            &trans       &trans         &trans      &trans  &kp BACKSPACE                                                          &poteto
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR        &kp PERCENT                                    &kp CARET      &kp AMPERSAND  &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LCTRL        &kp LEFT_ALT  &kp LEFT_WIN  &kp LCTRL         &kp TAB            &kp LC(LS(X))      &none    &kp QUESTION   &kp COLON      &kp DOUBLE_QUOTES  &kp UNDERSCORE        &kp PIPE
&kp LEFT_SHIFT   &none         &none         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp F10            &none    &kp SLASH      &kp SEMICOLON  &kp SQT            &kp MINUS             &kp NON_US_BACKSLASH
&none            &none         &none         &none             &none              &none              &kp F10  &kp BACKSPACE                                                          &kp DEL
            >;
        };

        MOUSE {
            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR    &none         &none         &none                                     &none  &none     &msc MOVE_X(5)   &none     &none
&none           &none         &none         &bt BT_NXT    &none         &kp C_VOLUME_UP      &none  &none  &mkp MB1  &msc MOVE_Y(10)  &mkp MB2  &none
&none           &none         &none         &bt BT_PRV    &none         &kp C_VOL_DN         &none  &none  &none     &none            &none     &none
&none           &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0         &none  &none                                       &none
            >;
        };

        SCROLL {
            bindings = <
&trans          &trans        &trans          &trans     &trans                      &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans          &kp LCTRL  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans          &trans     &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_NUMLOCK  &kp CAPSLOCK  &kp SCROLLLOCK  &trans     &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
